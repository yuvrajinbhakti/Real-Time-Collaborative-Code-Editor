version: '3.8'

services:
  # Redis service for pub/sub and caching
  redis:
    image: redis:7-alpine
    container_name: collab-editor-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - collab-network

  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: collab-editor-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=info
      - GENERATE_SOURCEMAP=false
    volumes:
      - app_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - collab-network

  # Load balancer / Reverse proxy
  nginx:
    image: nginx:alpine
    container_name: collab-editor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - collab-network

volumes:
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  collab-network:
    driver: bridge 